% Perform genetic operations (crossover and mutation) on the individuals in the mating pool
%
% INPUT: 
% 'pop' is the population to be evaluated [t+1 x n+4 x n_individuals]
% 'matPool' is the indices of the individuals from 'pop' allowed to reproduce [n_individuals x 1]
%
% OUTPUT: 
% 'offspring' is the population of offspring generated by genetic operations [t+1 x n+4 x n_individuals]
function [offspring] = variation(pop, matPool)

    global op;  % optimization problem
    global eas; % genetic algorithm settings

    % declare a static array of chromosomes filled with zeros
    offspring = zeros(size(op.targets,1)*2+1,op.n_links+eas.extra_genes,eas.n_individuals);
    
    matPool = matPool(randperm(length(matPool))); % shuffle the mating pool
    
    % this cannot be parallelized (or can it?)
    for i=1:2:eas.n_individuals

        % crossover
        index_p1 = matPool(i);
        index_p2 = matPool(i+1);

        p1 = pop(:,:,index_p1);
        p2 = pop(:,:,index_p2);

        [o1, o2] = crossover(p1, p2);   

        % mutation
        o1 = mutation(o1);
        o2 = mutation(o2);

        offspring(:,:,i) = o1;
        offspring(:,:,i+1) = o2;
        
        if o1(1,op.n_links+1) ~= 0
            error("A corrupted chromosome has been generated during crossover!\n");
        end
        if o2(1,op.n_links+1) ~= 0
            error("A corrupted chromosome has been generated during crossover!\n");
        end
    end
    offspring(1:end-1,1,:) = 0;
end